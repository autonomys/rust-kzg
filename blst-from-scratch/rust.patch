From bde067761f5b3f991cdb88ea6b2b0fd36c774721 Mon Sep 17 00:00:00 2001
From: belijzajac <tautvydas749@gmail.com>
Date: Tue, 11 Apr 2023 16:50:07 +0300
Subject: [PATCH] Update linking

---
 bindings/rust/Cargo.toml |  1 +
 bindings/rust/build.rs   | 23 +++++------------------
 2 files changed, 6 insertions(+), 18 deletions(-)

diff --git a/bindings/rust/Cargo.toml b/bindings/rust/Cargo.toml
index b827723..a415303 100644
--- a/bindings/rust/Cargo.toml
+++ b/bindings/rust/Cargo.toml
@@ -1,3 +1,4 @@
+[workspace]
 [package]
 name = "c-kzg"
 version = "0.1.0"
diff --git a/bindings/rust/build.rs b/bindings/rust/build.rs
index d2dba36..ac4153f 100644
--- a/bindings/rust/build.rs
+++ b/bindings/rust/build.rs
@@ -8,6 +8,7 @@ const MINIMAL_FIELD_ELEMENTS_PER_BLOB: usize = 4;
 //
 // NOTE: This code is taken from https://github.com/supranational/blst `build.rs` `main`. The crate
 // is not used as a depedency to avoid double link issues on dependants.
+#[allow(dead_code)]
 fn compile_blst(blst_base_dir: PathBuf) {
     // account for cross-compilation [by examining environment variables]
     let target_os = env::var("CARGO_CFG_TARGET_OS").unwrap();
@@ -98,6 +99,7 @@ fn compile_blst(blst_base_dir: PathBuf) {
 }
 
 /// Adds assembly files for blst compilation.
+#[allow(dead_code)]
 fn blst_assembly(file_vec: &mut Vec<PathBuf>, base_dir: &Path, _arch: &String) {
     #[cfg(target_env = "msvc")]
     if env::var("CARGO_CFG_TARGET_ENV").unwrap().eq("msvc") {
@@ -134,28 +136,12 @@ fn main() {
     eprintln!("Using FIELD_ELEMENTS_PER_BLOB={}", field_elements_per_blob);
 
     let blst_base_dir = root_dir.join("blst");
-    compile_blst(blst_base_dir.clone());
+    let rust_kzg_target_dir = root_dir.join("../../target/release/");
 
     // Obtain the header files of blst
     let blst_headers_dir = blst_base_dir.join("bindings");
-
     let c_src_dir = root_dir.join("src");
 
-    let mut cc = cc::Build::new();
-
-    #[cfg(windows)]
-    cc.flag("-D_CRT_SECURE_NO_WARNINGS");
-
-    cc.include(blst_headers_dir.clone());
-    cc.warnings(false);
-    cc.flag(format!("-DFIELD_ELEMENTS_PER_BLOB={}", field_elements_per_blob).as_str());
-    cc.file(c_src_dir.join("c_kzg_4844.c"));
-
-    cc.try_compile("ckzg").expect("Failed to compile ckzg");
-
-    // Tell cargo to search for the static blst exposed by the blst-bindings' crate.
-    println!("cargo:rustc-link-lib=static=blst");
-
     let bindings_out_path = cargo_dir.join("src").join("bindings").join("generated.rs");
     let header_file_path = c_src_dir.join("c_kzg_4844.h");
     let header_file = header_file_path.to_str().expect("valid header file");
@@ -168,7 +154,8 @@ fn main() {
     );
 
     // Finally, tell cargo this provides ckzg
-    println!("cargo:rustc-link-lib=ckzg");
+    println!("cargo:rustc-link-search={}", rust_kzg_target_dir.display());
+    println!("cargo:rustc-link-lib=blst_from_scratch");
 }
 
 fn make_bindings<P>(
-- 
2.40.0

